{"version":3,"sources":["Clicker.js","App.js","serviceWorker.js","index.js"],"names":["Clicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAutoAmount","_this$state","state","amountClicked","minusData","addData","addToMinus","currentAmount","setState","AddToMinus","autoAdd","setInterval","pleaseAdd","timeData","_this$state2","addThem","handleCircleClicked","_this$state3","clickData","clickerClicked","handleCircleMouseUp","handleAddClick","_this$state4","minusClickData","handleMinusTime","_this$state5","minusTimeData","react_default","a","createElement","className","onMouseUp","onMouseDown","testImage","onClick","Component","App","src_Clicker_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f985135e.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Clicker.css';\n\nclass Clicker extends Component{\n  constructor(props){\n    super(props);\n\n    this.state ={\n      amountClicked: 100000000,\n\n      minusData: 10,\n      addData: 0,\n\n      addToMinus: 1000,\n\n      clickData: 1,\n      minusClickData: 1000,\n\n      timeData: 3000,\n      minusTimeData: 5000,\n\n      clickerClicked: false,\n    };\n\n  }\n  \n\n\n  handleAutoAmount =() =>{\n    const {amountClicked, minusData, addData, addToMinus} = this.state;\n\n    if(amountClicked >= minusData){\n      const currentAmount = amountClicked - minusData;\n\n      this.setState({\n        amountClicked: currentAmount,\n      });\n\n      if(addData < 1){\n        this.setState({\n          minusData: 100,\n          addData: addData + 1,\n        });\n      }else{\n        this.setState({\n          minusData: minusData + 100 * addData,\n          addData: addData + 5,\n          AddToMinus: addToMinus * addData,\n        });\n      }\n      \n\n      this.autoAdd();\n    }\n    \n  }\n\n  autoAdd =() =>{\n    setInterval(this.pleaseAdd, this.state.timeData);\n  }\n\n  pleaseAdd =() =>{\n    const {amountClicked, addData} = this.state;\n    const addThem = amountClicked + addData;\n\n    this.setState({\n      amountClicked: addThem,\n\n    })\n\n  }\n\n  handleCircleClicked = () =>{\n    const {amountClicked, clickData} = this.state;\n\n    this.setState({\n      amountClicked: amountClicked + clickData,\n      clickerClicked: true,\n    });\n  }\n\n  handleCircleMouseUp =() =>{\n    this.setState({\n      clickerClicked: false,\n    })\n  }\n\n  handleAddClick =() =>{\n    const {amountClicked, minusClickData, clickData} = this.state;\n\n    if(amountClicked > minusClickData){\n      this.setState({\n        amountClicked: amountClicked - minusClickData,\n        clickData: clickData + 1,\n        minusClickData: minusClickData + 6000,\n      });\n    }\n    \n  }\n\n  handleMinusTime =() =>{\n    const {amountClicked, minusTimeData, timeData, addData} = this.state;\n\n    if(amountClicked > minusTimeData){\n\n      if(timeData >= 400){\n        this.setState({\n          amountClicked: amountClicked - minusTimeData,\n          timeData: timeData - 300,\n        })\n        if(addData <= 1){\n          this.setState({\n            minusTimeData: minusTimeData + 1000,\n          });\n        }else{\n          this.setState({\n            minusTimeData: minusTimeData + (1000 * addData),\n         });\n        }\n\n      }else{\n        this.setState({\n          timeData: 100,\n        });\n\n      }\n      \n    }\n\n  }\n\n  render(){\n    \n    return(\n      <div className=\"container\">\n\n        <div className=\"clickerContainer\">\n          <div className=\"amountContainer\">\n            <span className={(this.state.clickerClicked? 'active' : ' ')}>{this.state.amountClicked}</span>\n          </div>\n\n          <button className={'clicker ' + (this.state.clickerClicked? 'active' : ' ')} onMouseUp={this.handleCircleMouseUp} onMouseDown={this.handleCircleClicked}>{this.props.testImage}</button> \n        </div>\n\n        <div className=\"autoContainer\">\n          <p>\n            <button className=\"autoAdd\" onClick={this.handleAutoAmount}> {this.state.minusData} points for {(this.state.addData) + 1} auto Click</button>\n          </p>\n          <p>\n            <button className=\"autoAdd\" onClick={this.handleMinusTime}> {this.state.minusTimeData} points to lessen Auto time </button> \n            &nbsp;\n            Currently: {(this.state.timeData / 1000)}\n          </p>\n          <p>\n            <button className=\"autoAdd\" onClick={this.handleAddClick}> {this.state.minusClickData} points for +1 Points per Click</button> \n            &nbsp; \n            Currently: {this.state.clickData}\n          </p>\n        </div>\n\n      </div>\n\n    );\n\n  }\n}\n\nexport default Clicker;","import React, { Component } from 'react';\nimport './App.css';\nimport Clicker from './Clicker';\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <div>\n          <Clicker />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}